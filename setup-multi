#!/bin/bash

# Setup script for development environment tools

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if ~/.local/bin is in PATH
check_path() {
    if [[ ":$PATH:" == *":$HOME/.local/bin:"* ]]; then
        log_success "~/.local/bin is already in PATH"
        return 0
    else
        log_warning "~/.local/bin is not in PATH"
        return 1
    fi
}

# Add ~/.local/bin to PATH in shell config
setup_path() {
    local shell_config=""
    
    # Detect shell and config file
    if [[ "$SHELL" == *"zsh"* ]]; then
        shell_config="$HOME/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        shell_config="$HOME/.bashrc"
        # On macOS, .bash_profile is often used instead
        if [[ "$(uname)" == "Darwin" ]] && [[ -f "$HOME/.bash_profile" ]]; then
            shell_config="$HOME/.bash_profile"
        fi
    else
        log_warning "Unknown shell: $SHELL. Please manually add ~/.local/bin to your PATH"
        return 1
    fi
    
    # Check if PATH export already exists
    if [[ -f "$shell_config" ]] && grep -q "\.local/bin" "$shell_config"; then
        log_info "PATH setup already exists in $shell_config"
        return 0
    fi
    
    log_info "Adding ~/.local/bin to PATH in $shell_config"
    
    # Create config file if it doesn't exist
    touch "$shell_config"
    
    # Add PATH export
    echo "" >> "$shell_config"
    echo "# Add ~/.local/bin to PATH for dev-env tools" >> "$shell_config"
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$shell_config"
    
    log_success "Added PATH export to $shell_config"
    log_info "Run 'source $shell_config' or restart your terminal to apply changes"
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    if ! command -v tmux &> /dev/null; then
        missing_deps+=("tmux")
    fi
    
    if ! command -v git &> /dev/null; then
        missing_deps+=("git")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Missing dependencies: ${missing_deps[*]}"
        echo ""
        echo "Install them with:"
        if [[ "$(uname)" == "Darwin" ]]; then
            echo "  brew install ${missing_deps[*]}"
        else
            echo "  sudo apt-get install ${missing_deps[*]}  # Ubuntu/Debian"
            echo "  sudo yum install ${missing_deps[*]}      # CentOS/RHEL"
        fi
        return 1
    else
        log_success "All dependencies are installed"
        return 0
    fi
}

# Create useful aliases - removed for sharing

# Install scripts to ~/.local/bin
install_scripts() {
    log_info "Installing scripts to ~/.local/bin..."
    
    # Create ~/.local/bin if it doesn't exist
    mkdir -p "$HOME/.local/bin"
    
    # Copy multi script
    if [[ -f "$SCRIPT_DIR/multi" ]]; then
        cp "$SCRIPT_DIR/multi" "$HOME/.local/bin/multi"
        chmod +x "$HOME/.local/bin/multi"
        log_success "Installed multi to ~/.local/bin/multi"
    else
        log_error "multi script not found in $SCRIPT_DIR"
        return 1
    fi
}

# Test the installation
test_installation() {
    log_info "Testing installation..."
    
    # Test if scripts are executable and in PATH
    if command -v multi &> /dev/null; then
        log_success "multi command is available"
    else
        log_error "multi command not found in PATH"
        return 1
    fi
    
    
    # Test help output
    if multi help &> /dev/null; then
        log_success "multi help works correctly"
    else
        log_error "multi help failed"
        return 1
    fi
    
    log_success "Installation test passed!"
}

# Show usage information
show_commands() {
    echo ""
    echo "ðŸŽ‰ Development Environment Tools Installed!"
    echo "==========================================="
    echo ""
    echo "Available commands:"
    echo "  multi start <branch>    Create development environment for any branch"
    echo "  multi switch <branch>   Switch to existing environment"
    echo "  multi list              List all environments"
    echo "  multi cleanup <branch>  Clean up environment"
    echo ""
    echo "Quick workflow:"
    echo "  1. cd into any git repository"
    echo "  2. Run: multi start your-branch-name"
    echo "  3. In the tmux session, run: cursor ."
    echo "  4. Start coding!"
    echo ""
}

# Main setup function
main() {
    echo "Development Environment Tools Setup"
    echo "==================================="
    echo ""
    
    # Check dependencies first
    if ! check_dependencies; then
        exit 1
    fi
    
    # Setup PATH
    if ! check_path; then
        setup_path
    fi
    
    # Install scripts to ~/.local/bin
    if ! install_scripts; then
        exit 1
    fi
    
    # Setup aliases - removed for sharing
    
    # Test installation (will fail if PATH not updated yet)
    if check_path; then
        test_installation
    else
        log_info "Skipping test - PATH not updated yet"
    fi
    
    # Show available commands
    show_commands
    
    echo "Setup complete! ðŸš€"
    echo ""
    if ! check_path; then
        log_warning "You need to restart your terminal or run:"
        echo "  source ~/.zshrc  (or ~/.bashrc)"
    fi
}

main "$@"
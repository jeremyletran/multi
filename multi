#!/bin/bash

# Multi-Branch Development Environment Manager  
# Manages git worktrees, tmux sessions, and editor instances for any git repository

set -e

# Get the current git repository root (main repo, not worktree)
get_repo_root() {
    local current_root=$(git rev-parse --show-toplevel 2>/dev/null)
    
    # Check if we're in a worktree by looking at worktree list
    local worktree_info=$(git worktree list --porcelain 2>/dev/null)
    if [[ -n "$worktree_info" ]]; then
        # Get the main worktree (first in the list, which is always the main repo)
        local main_root=$(echo "$worktree_info" | grep '^worktree ' | head -1 | cut -d' ' -f2-)
        
        # If we found a main root and we're not already there, use it
        if [[ -n "$main_root" && "$current_root" != "$main_root" ]]; then
            echo "$main_root"
        else
            echo "$current_root"
        fi
    else
        echo "$current_root"
    fi
}

# Check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        log_error "Not in a git repository."
        echo ""
        echo "Please run this command from within a git repository."
        echo "If you need to initialize a git repo: git init"
        exit 1
    fi
}

# Initialize git-related variables (only when in a git repo)
init_git_vars() {
    if git rev-parse --is-inside-work-tree &>/dev/null; then
        PROJECT_ROOT="$(get_repo_root)"
        REPO_NAME="$(basename "$PROJECT_ROOT")"
        WORKTREE_DIR="$PROJECT_ROOT/.dev-worktrees"
        SESSION_PREFIX="multi-$REPO_NAME"
    else
        PROJECT_ROOT=""
        REPO_NAME=""
        WORKTREE_DIR=""
        SESSION_PREFIX=""
    fi
}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if tmux is installed
check_tmux() {
    if ! command -v tmux &> /dev/null; then
        log_error "tmux is not installed. Please install it first:"
        echo "  macOS: brew install tmux"
        echo "  Ubuntu: sudo apt-get install tmux"
        exit 1
    fi
}

# Check if Claude Code is available
check_claude() {
    if command -v claude &> /dev/null; then
        return 0
    elif command -v cursor &> /dev/null; then
        return 1  # Cursor available but not Claude
    else
        return 2  # Neither available
    fi
}

# Get the appropriate editor command
get_editor_command() {
    check_claude
    local status=$?
    
    case $status in
        0) echo "claude" ;;
        1) echo "cursor" ;;
        2) echo "code" ;;
    esac
}

# Create worktree directory if it doesn't exist
ensure_worktree_dir() {
    if [[ ! -d "$WORKTREE_DIR" ]]; then
        mkdir -p "$WORKTREE_DIR"
        log_info "Created worktree directory: $WORKTREE_DIR"
        
        # Add to .gitignore if it exists
        if [[ -f "$PROJECT_ROOT/.gitignore" ]]; then
            if ! grep -q ".dev-worktrees" "$PROJECT_ROOT/.gitignore"; then
                echo ".dev-worktrees/" >> "$PROJECT_ROOT/.gitignore"
                log_info "Added .dev-worktrees/ to .gitignore"
            fi
        fi
    fi
}

# Get current git branch
get_current_branch() {
    git -C "$PROJECT_ROOT" branch --show-current
}

# Check if branch exists locally or remotely
branch_exists() {
    local branch="$1"
    
    # Check if branch exists locally
    if git -C "$PROJECT_ROOT" show-ref --verify --quiet "refs/heads/$branch"; then
        return 0
    fi
    
    # Check if branch exists on remote
    if git -C "$PROJECT_ROOT" show-ref --verify --quiet "refs/remotes/origin/$branch"; then
        return 0
    fi
    
    return 1
}

# Check if branch exists on remote
branch_exists_on_remote() {
    local branch="$1"
    git -C "$PROJECT_ROOT" show-ref --verify --quiet "refs/remotes/origin/$branch"
}

# Check for unpushed commits in a worktree
has_unpushed_commits() {
    local worktree_path="$1"
    local branch="$2"
    
    # Change to the worktree directory to check its status
    if [[ ! -d "$worktree_path" ]]; then
        return 1
    fi
    
    # Get the current branch in the worktree
    local current_branch=$(git -C "$worktree_path" branch --show-current 2>/dev/null)
    if [[ -z "$current_branch" ]]; then
        return 1
    fi
    
    # Check if remote tracking branch exists
    if ! git -C "$worktree_path" show-ref --verify --quiet "refs/remotes/origin/$current_branch" 2>/dev/null; then
        # No remote tracking branch means all commits are unpushed
        local commit_count=$(git -C "$worktree_path" rev-list --count HEAD 2>/dev/null || echo "0")
        if [[ "$commit_count" -gt 0 ]]; then
            return 0  # Has commits but no remote tracking
        fi
        return 1
    fi
    
    # Check if there are commits ahead of remote
    local ahead=$(git -C "$worktree_path" rev-list --count "origin/$current_branch..HEAD" 2>/dev/null || echo "0")
    if [[ "$ahead" -gt 0 ]]; then
        return 0  # Has unpushed commits
    fi
    
    return 1  # No unpushed commits
}

# Get count of unpushed commits
get_unpushed_commit_count() {
    local worktree_path="$1"
    
    if [[ ! -d "$worktree_path" ]]; then
        echo "0"
        return
    fi
    
    local current_branch=$(git -C "$worktree_path" branch --show-current 2>/dev/null)
    if [[ -z "$current_branch" ]]; then
        echo "0"
        return
    fi
    
    # Check if remote tracking branch exists
    if ! git -C "$worktree_path" show-ref --verify --quiet "refs/remotes/origin/$current_branch" 2>/dev/null; then
        # No remote tracking branch - count all commits
        git -C "$worktree_path" rev-list --count HEAD 2>/dev/null || echo "0"
        return
    fi
    
    # Count commits ahead of remote
    git -C "$worktree_path" rev-list --count "origin/$current_branch..HEAD" 2>/dev/null || echo "0"
}

# Check if worktree has uncommitted changes
has_uncommitted_changes() {
    local worktree_path="$1"
    
    if [[ ! -d "$worktree_path" ]]; then
        return 1
    fi
    
    # Check for staged or unstaged changes
    if ! git -C "$worktree_path" diff --quiet 2>/dev/null || ! git -C "$worktree_path" diff --cached --quiet 2>/dev/null; then
        return 0
    fi
    
    # Check for untracked files
    local untracked=$(git -C "$worktree_path" ls-files --others --exclude-standard 2>/dev/null | wc -l)
    if [[ "$untracked" -gt 0 ]]; then
        return 0
    fi
    
    return 1
}

# Create or get worktree path
get_worktree_path() {
    local branch="$1"
    # Replace slashes with dashes for directory names
    local safe_branch="${branch//\//-}"
    echo "$WORKTREE_DIR/$safe_branch"
}

# Copy essential files from main repo to worktree
copy_essential_files() {
    local worktree_path="$1"
    local files_to_copy=(
        "*.pem"
        "*.key" 
        "*.cert"
        ".env*"
        "node_modules"
    )
    
    log_info "Copying essential files to worktree..."
    
    for pattern in "${files_to_copy[@]}"; do
        # Use find to handle patterns properly
        find "$PROJECT_ROOT" -maxdepth 1 -name "$pattern" -not -path "*/.dev-worktrees/*" 2>/dev/null | while read -r file; do
            if [[ -e "$file" ]]; then
                local filename=$(basename "$file")
                log_info "Copying $filename..."
                if [[ -d "$file" ]]; then
                    cp -r "$file" "$worktree_path/"
                else
                    cp "$file" "$worktree_path/"
                fi
            fi
        done
    done
    
    # Run package manager install if needed
    if [[ -f "$worktree_path/package.json" ]]; then
        if [[ -f "$PROJECT_ROOT/yarn.lock" ]] && command -v yarn &>/dev/null; then
            log_info "Installing dependencies with yarn..."
            (cd "$worktree_path" && yarn install --frozen-lockfile 2>/dev/null || yarn install)
        elif command -v npm &>/dev/null; then
            log_info "Installing dependencies with npm..."
            (cd "$worktree_path" && npm ci 2>/dev/null || npm install)
        fi
    fi
}

# Create git worktree
create_worktree() {
    local branch="$1"
    local worktree_path="$(get_worktree_path "$branch")"
    
    if [[ -d "$worktree_path" ]]; then
        log_info "Worktree for branch '$branch' already exists at: $worktree_path"
        return 0
    fi
    
    log_info "Creating worktree for branch: $branch"
    
    # Ensure we have the latest main branch
    log_info "Fetching latest changes from main..."
    git -C "$PROJECT_ROOT" fetch origin main:main 2>/dev/null || git -C "$PROJECT_ROOT" fetch origin main 2>/dev/null || true
    
    if branch_exists "$branch"; then
        # Branch exists, create worktree from it
        log_info "Branch exists, creating worktree from existing branch"
        git -C "$PROJECT_ROOT" worktree add "$worktree_path" "$branch"
    else
        # Branch doesn't exist, create new branch from main and worktree
        log_info "Branch '$branch' doesn't exist. Creating new branch from main."
        git -C "$PROJECT_ROOT" worktree add -b "$branch" "$worktree_path" main
    fi
    
    log_success "Worktree created: $worktree_path"
    
    # Copy essential files from main repo
    copy_essential_files "$worktree_path"
}

# Get tmux session name
get_session_name() {
    local branch="$1"
    # Replace slashes with dashes for session names
    local safe_branch="${branch//\//-}"
    echo "${SESSION_PREFIX}-${safe_branch}"
}

# Check if tmux session exists
session_exists() {
    local session_name="$1"
    tmux has-session -t "$session_name" 2>/dev/null
}

# Detect package manager and dev commands
detect_dev_commands() {
    local worktree_path="$1"
    local commands=()
    
    # Check for package.json (Node.js project)
    if [[ -f "$worktree_path/package.json" ]]; then
        # Check for yarn
        if [[ -f "$worktree_path/yarn.lock" ]] && command -v yarn &>/dev/null; then
            if grep -q '"dev"' "$worktree_path/package.json"; then
                commands+=("yarn dev")
            fi
            if grep -q '"start"' "$worktree_path/package.json"; then
                commands+=("yarn start")
            fi
        # Check for npm
        elif [[ -f "$worktree_path/package-lock.json" ]] || command -v npm &>/dev/null; then
            if grep -q '"dev"' "$worktree_path/package.json"; then
                commands+=("npm run dev")
            fi
            if grep -q '"start"' "$worktree_path/package.json"; then
                commands+=("npm start")
            fi
        fi
    fi
    
    # Check for Cargo.toml (Rust project)
    if [[ -f "$worktree_path/Cargo.toml" ]] && command -v cargo &>/dev/null; then
        commands+=("cargo run")
    fi
    
    # Check for Makefile
    if [[ -f "$worktree_path/Makefile" ]]; then
        commands+=("make dev" "make run")
    fi
    
    # Check for docker-compose
    if [[ -f "$worktree_path/docker-compose.yml" ]] && command -v docker-compose &>/dev/null; then
        commands+=("docker-compose up")
    fi
    
    echo "${commands[@]}"
}

# Setup custom tmux status bar for development
setup_tmux_status_bar() {
    local session_name="$1"
    local branch="$2"
    
    # Colors
    local bg_color="#2e3440"      # Dark gray background
    local accent_color="#88c0d0"  # Light blue accent
    local branch_color="#a3be8c"  # Green for branch
    local repo_color="#ebcb8b"    # Yellow for repo
    local text_color="#eceff4"    # Light text
    
    # Left side: Repository and Branch info
    local left_format="#{?client_prefix,#[bg=#bf616a],#[bg=$bg_color]}#[fg=$text_color] "
    left_format+="#[fg=$repo_color,bold]$REPO_NAME#[fg=$text_color] → "
    left_format+="#[fg=$branch_color,bold]$branch#[fg=$text_color] "
    
    # Right side: Switch shortcut help
    local right_format="#[fg=$text_color,bg=$bg_color] Switch: "
    right_format+="#[fg=$accent_color,bold]Ctrl+b s #[fg=$text_color]"
    
    # Window format: show active window clearly
    local window_format="#[fg=$text_color,bg=$bg_color]#{?window_activity_flag,#[fg=#bf616a],}"
    window_format+="#{?window_bell_flag,#[fg=#bf616a],}"
    window_format+="#{?window_active,#[fg=$accent_color,bg=#434c5e],#[fg=#8a8a8a]} "
    window_format+="#{window_index}:#{window_name} "
    
    # Apply the custom status bar to this session
    tmux set-option -t "$session_name" status-left "$left_format"
    tmux set-option -t "$session_name" status-right "$right_format"
    tmux set-option -t "$session_name" window-status-format "$window_format"
    tmux set-option -t "$session_name" window-status-current-format "#[fg=$accent_color,bg=#434c5e,bold] #{window_index}:#{window_name} "
    
    # Status bar appearance
    tmux set-option -t "$session_name" status-bg "$bg_color"
    tmux set-option -t "$session_name" status-fg "$text_color"
    tmux set-option -t "$session_name" status-left-length 50
    tmux set-option -t "$session_name" status-right-length 20
    tmux set-option -t "$session_name" status-interval 1
    
    # Show prefix key indicator
    tmux set-option -t "$session_name" status-left-style "#{?client_prefix,bg=#bf616a,bg=$bg_color}"
}

# Create tmux session
create_tmux_session() {
    local branch="$1"
    local worktree_path="$(get_worktree_path "$branch")"
    local session_name="$(get_session_name "$branch")"
    
    if session_exists "$session_name"; then
        log_info "Tmux session '$session_name' already exists"
        return 0
    fi
    
    log_info "Creating tmux session: $session_name"
    
    # Create new tmux session in detached mode
    tmux new-session -d -s "$session_name" -c "$worktree_path"
    
    # Customize status bar for this session
    setup_tmux_status_bar "$session_name" "$branch"
    
    # Window 0: Terminal with easy cursor launch
    tmux rename-window -t "$session_name:0" "main"
    tmux send-keys -t "$session_name:main" "# Welcome to $branch development environment" Enter
    tmux send-keys -t "$session_name:main" "# Run 'cursor .' to open Cursor in this directory" Enter
    tmux send-keys -t "$session_name:main" "# Or 'claude .' for Claude Code" Enter
    tmux send-keys -t "$session_name:main" ""
    
    # Window 1: Development server (if applicable)
    tmux new-window -t "$session_name" -n "dev" -c "$worktree_path"
    
    # Detect and suggest dev commands
    local dev_commands=($(detect_dev_commands "$worktree_path"))
    if [[ ${#dev_commands[@]} -gt 0 ]]; then
        local suggested_cmd="${dev_commands[0]}"
        tmux send-keys -t "$session_name:dev" "# Suggested dev command: $suggested_cmd" Enter
        tmux send-keys -t "$session_name:dev" ""
    fi
    
    # Window 2: Git operations
    tmux new-window -t "$session_name" -n "git" -c "$worktree_path"
    tmux send-keys -t "$session_name:git" "git status" Enter
    
    # Select the main window by default
    tmux select-window -t "$session_name:main"
    
    log_success "Tmux session created: $session_name"
    
    # Show available dev commands
    if [[ ${#dev_commands[@]} -gt 0 ]]; then
        log_info "Detected development commands:"
        for cmd in "${dev_commands[@]}"; do
            echo "  • $cmd"
        done
    fi
}

# Start development environment
start_env() {
    local branch="$1"
    
    if [[ -z "$branch" ]]; then
        log_error "Branch name is required"
        show_usage
        exit 1
    fi
    
    check_git_repo
    ensure_worktree_dir
    create_worktree "$branch"
    create_tmux_session "$branch"
    
    local session_name="$(get_session_name "$branch")"
    log_success "Development environment ready for branch: $branch"
    log_info "Repository: $REPO_NAME"
    log_info "Switching to session..."
    
    # Always auto-attach to the session
    if [[ -n "$TMUX" ]]; then
        tmux switch-client -t "$session_name"
    else
        tmux attach -t "$session_name"
    fi
}

# Switch to existing environment
switch_env() {
    local branch="$1"
    
    check_git_repo
    
    # If no branch specified, show interactive menu
    if [[ -z "$branch" ]]; then
        show_switch_menu
        return
    fi
    
    local session_name="$(get_session_name "$branch")"
    
    if ! session_exists "$session_name"; then
        log_error "No development environment found for branch: $branch"
        log_info "Create one first with: multi start $branch"
        echo ""
        log_info "Tip: Use 'multi switch' (no branch) to see available environments"
        exit 1
    fi
    
    log_info "Switching to development environment: $branch ($REPO_NAME)"
    
    if [[ -n "$TMUX" ]]; then
        # If we're already in tmux, switch to the session
        tmux switch-client -t "$session_name"
    else
        # If we're not in tmux, attach to the session
        tmux attach -t "$session_name"
    fi
}

# Show interactive menu for switching environments
show_switch_menu() {
    echo "Available Development Environments:"
    echo "=================================="
    
    local sessions=()
    local count=0
    
    # Get all tmux sessions for this repo
    if tmux list-sessions 2>/dev/null | grep -q "^${SESSION_PREFIX}-"; then
        while IFS= read -r line; do
            local session_name=$(echo "$line" | cut -d: -f1)
            local branch=${session_name#"$SESSION_PREFIX"-}
            # Convert dashes back to slashes for display
            branch=${branch//-/\/}
            local status=$(echo "$line" | grep -o "(attached)" || echo "(detached)")
            
            count=$((count + 1))
            sessions+=("$branch")
            
            if [[ "$status" == "(attached)" ]]; then
                echo "  $count) $branch ${GREEN}● active${NC}"
            else
                echo "  $count) $branch"
            fi
        done < <(tmux list-sessions 2>/dev/null | grep "^${SESSION_PREFIX}-")
    fi
    
    if [[ $count -eq 0 ]]; then
        echo "No development environments found."
        echo ""
        echo "Create one with: multi start <branch-name>"
        return 1
    fi
    
    echo ""
    echo -n "Select environment (1-$count, or Enter to cancel): "
    read -r choice
    
    if [[ -z "$choice" ]]; then
        echo "Cancelled."
        return 0
    fi
    
    if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 ]] && [[ "$choice" -le $count ]]; then
        local selected_branch="${sessions[$((choice-1))]}"
        switch_env "$selected_branch"
    else
        log_error "Invalid selection: $choice"
        return 1
    fi
}

# List all development environments
list_envs() {
    check_git_repo
    
    # Show current location context
    local current_dir=$(pwd)
    local relative_path=${current_dir#"$PROJECT_ROOT"}
    if [[ "$relative_path" != "$current_dir" ]]; then
        if [[ "$relative_path" == "" ]]; then
            echo "Current location: Repository root"
        elif [[ "$relative_path" == "/.dev-worktrees"* ]]; then
            local worktree_name=${relative_path#"/.dev-worktrees/"}
            worktree_name=${worktree_name%%/*}
            echo "Current location: Worktree '$worktree_name'"
        else
            echo "Current location: $relative_path"
        fi
        echo ""
    fi
    
    echo "Development Environments for: $REPO_NAME"
    echo "==========================================="
    
    local found_any=false
    
    # List tmux sessions for this repo
    if tmux list-sessions 2>/dev/null | grep -q "^${SESSION_PREFIX}-"; then
        echo -e "\n${GREEN}Active tmux sessions:${NC}"
        tmux list-sessions 2>/dev/null | grep "^${SESSION_PREFIX}-" | while read line; do
            local session_name=$(echo "$line" | cut -d: -f1)
            local branch=${session_name#"$SESSION_PREFIX"-}
            # Convert dashes back to slashes for display
            branch=${branch//-/\/}
            local status=$(echo "$line" | grep -o "(attached)" || echo "(detached)")
            echo "  • $branch $status"
            found_any=true
        done
    fi
    
    # List worktrees for this repo
    if [[ -d "$WORKTREE_DIR" ]] && [[ $(ls -A "$WORKTREE_DIR" 2>/dev/null | wc -l) -gt 0 ]]; then
        echo -e "\n${BLUE}Available worktrees:${NC}"
        for worktree in "$WORKTREE_DIR"/*; do
            if [[ -d "$worktree" ]]; then
                local branch=$(basename "$worktree")
                # Convert dashes back to slashes for display
                branch=${branch//-/\/}
                echo "  • $branch"
                found_any=true
            fi
        done
    fi
    
    if [[ "$found_any" = false ]]; then
        echo "No development environments found."
        echo ""
        echo "Getting started:"
        echo "  • Create your first environment: multi start <branch-name>"
        echo "  • Example: multi start feature/my-feature"
        echo ""
        echo "Note: This command works from anywhere within the repository,"
        echo "      including from inside worktrees in .dev-worktrees/"
    fi
}

# Stop development environment
stop_env() {
    local branch="$1"
    
    if [[ -z "$branch" ]]; then
        log_error "Branch name is required"
        show_usage
        exit 1
    fi
    
    check_git_repo
    local session_name="$(get_session_name "$branch")"
    
    if session_exists "$session_name"; then
        log_info "Killing tmux session: $session_name"
        tmux kill-session -t "$session_name"
        log_success "Tmux session stopped"
    else
        log_warning "No tmux session found for branch: $branch"
    fi
}

# Clean up development environment
cleanup_env() {
    local branch="$1"
    local force=false
    
    if [[ "$branch" == "--force" ]]; then
        force=true
        branch="$2"
    elif [[ "$2" == "--force" ]]; then
        force=true
    fi
    
    if [[ -z "$branch" ]]; then
        log_error "Branch name is required"
        show_usage
        exit 1
    fi
    
    check_git_repo
    local session_name="$(get_session_name "$branch")"
    local worktree_path="$(get_worktree_path "$branch")"
    
    # Stop tmux session
    stop_env "$branch"
    
    # Remove worktree with safety checks
    if [[ -d "$worktree_path" ]]; then
        log_info "Checking worktree safety before removal: $worktree_path"
        
        # Check for uncommitted changes
        local has_uncommitted=false
        if has_uncommitted_changes "$worktree_path"; then
            has_uncommitted=true
            log_warning "⚠️  Worktree has uncommitted changes"
        fi
        
        # Check for unpushed commits
        local has_unpushed=false
        local unpushed_count=0
        if has_unpushed_commits "$worktree_path" "$branch"; then
            has_unpushed=true
            unpushed_count=$(get_unpushed_commit_count "$worktree_path")
            log_warning "⚠️  Worktree has $unpushed_count unpushed commit(s)"
            
            # Check if branch exists on remote
            local current_branch=$(git -C "$worktree_path" branch --show-current 2>/dev/null)
            if ! branch_exists_on_remote "$current_branch"; then
                log_warning "⚠️  Branch '$current_branch' does not exist on remote - all commits will be lost!"
            fi
        fi
        
        # If there are safety concerns and not forcing, require confirmation
        if [[ "$has_uncommitted" = true || "$has_unpushed" = true ]] && [[ "$force" != true ]]; then
            echo ""
            log_error "🛑 SAFETY CHECK FAILED"
            echo ""
            echo "Potential data loss detected:"
            
            if [[ "$has_uncommitted" = true ]]; then
                echo "  • Uncommitted changes will be lost"
            fi
            
            if [[ "$has_unpushed" = true ]]; then
                echo "  • $unpushed_count unpushed commit(s) will be lost forever"
                echo ""
                echo "Recent commits that will be lost:"
                git -C "$worktree_path" log --oneline -n 3 2>/dev/null | sed 's/^/    /'
            fi
            
            echo ""
            echo "To proceed safely:"
            echo "  1. Commit your changes:     cd '$worktree_path' && git add . && git commit -m 'Save work'"
            echo "  2. Push your changes:       cd '$worktree_path' && git push origin $branch"
            echo "  3. Then run cleanup again:  multi cleanup $branch"
            echo ""
            echo "Or to force removal anyway:  multi cleanup $branch --force"
            echo ""
            log_warning "Cleanup aborted to prevent data loss"
            return 1
        fi
        
        # Proceed with removal
        if [[ "$force" = true ]]; then
            log_warning "⚠️  Force removing worktree (ignoring safety checks): $worktree_path"
            if [[ "$has_unpushed" = true ]]; then
                log_warning "⚠️  $unpushed_count unpushed commit(s) will be permanently lost!"
            fi
            git -C "$PROJECT_ROOT" worktree remove --force "$worktree_path"
        else
            log_info "Removing worktree: $worktree_path"
            git -C "$PROJECT_ROOT" worktree remove "$worktree_path"
        fi
        log_success "Worktree removed"
    else
        log_warning "No worktree found for branch: $branch"
    fi
}

# Clean up all environments for this repo
cleanup_all() {
    local force=false
    
    if [[ "$1" == "--force" ]]; then
        force=true
    fi
    
    check_git_repo
    log_info "Cleaning up all development environments for: $REPO_NAME"
    
    # Check all worktrees for safety issues before proceeding
    local worktrees_with_issues=()
    local total_unpushed=0
    local has_any_issues=false
    
    if [[ -d "$WORKTREE_DIR" ]] && [[ "$force" != true ]]; then
        log_info "Performing safety checks on all worktrees..."
        
        for worktree in "$WORKTREE_DIR"/*; do
            if [[ -d "$worktree" ]]; then
                local branch=$(basename "$worktree")
                local issues=()
                
                # Check for uncommitted changes
                if has_uncommitted_changes "$worktree"; then
                    issues+=("uncommitted changes")
                    has_any_issues=true
                fi
                
                # Check for unpushed commits
                if has_unpushed_commits "$worktree" "$branch"; then
                    local count=$(get_unpushed_commit_count "$worktree")
                    issues+=("$count unpushed commit(s)")
                    total_unpushed=$((total_unpushed + count))
                    has_any_issues=true
                fi
                
                if [[ ${#issues[@]} -gt 0 ]]; then
                    worktrees_with_issues+=("$branch: ${issues[*]}")
                fi
            fi
        done
        
        # If there are issues and not forcing, show warnings and abort
        if [[ "$has_any_issues" = true ]]; then
            echo ""
            log_error "🛑 SAFETY CHECK FAILED FOR CLEANUP-ALL"
            echo ""
            echo "The following worktrees have potential data loss:"
            for issue in "${worktrees_with_issues[@]}"; do
                echo "  • $issue"
            done
            echo ""
            echo "Total unpushed commits that will be lost: $total_unpushed"
            echo ""
            echo "To proceed safely:"
            echo "  1. Clean up each worktree individually: multi cleanup <branch-name>"
            echo "  2. Or commit and push all changes first"
            echo "  3. Then run cleanup-all again"
            echo ""
            echo "Or to force removal anyway: multi cleanup-all --force"
            echo ""
            log_warning "Cleanup-all aborted to prevent data loss"
            return 1
        fi
    fi
    
    # Kill all dev sessions for this repo
    if tmux list-sessions 2>/dev/null | grep -q "^${SESSION_PREFIX}-"; then
        log_info "Stopping all tmux sessions..."
        tmux list-sessions 2>/dev/null | grep "^${SESSION_PREFIX}-" | cut -d: -f1 | xargs -I {} tmux kill-session -t {}
    fi
    
    # Remove all worktrees for this repo
    if [[ -d "$WORKTREE_DIR" ]]; then
        for worktree in "$WORKTREE_DIR"/*; do
            if [[ -d "$worktree" ]]; then
                local branch=$(basename "$worktree")
                if [[ "$force" = true ]]; then
                    log_warning "⚠️  Force removing worktree: $branch"
                    if has_unpushed_commits "$worktree" "$branch"; then
                        local count=$(get_unpushed_commit_count "$worktree")
                        log_warning "⚠️  $count unpushed commit(s) will be permanently lost!"
                    fi
                    git -C "$PROJECT_ROOT" worktree remove --force "$worktree" 2>/dev/null || true
                else
                    log_info "Removing worktree: $branch"
                    git -C "$PROJECT_ROOT" worktree remove "$worktree" 2>/dev/null || {
                        log_warning "Worktree $branch could not be removed"
                    }
                fi
            fi
        done
        
        # Remove empty worktree directory
        if [[ $(ls -A "$WORKTREE_DIR" 2>/dev/null | wc -l) -eq 0 ]]; then
            rmdir "$WORKTREE_DIR"
            log_success "Removed empty worktree directory"
        fi
    fi
    
    log_success "Cleanup complete for: $REPO_NAME"
}


# Show usage information
show_usage() {
    echo "Multi-Branch Development Environment Manager"
    echo "==========================================="
    echo ""
    echo "Manages git worktrees, tmux sessions, and editor instances for any git repository."
    echo ""
    echo "Usage: multi <command> [options]"
    echo ""
    echo "Commands:"
    echo "  start <branch>     Create and start development environment for branch (auto-switches)"
    echo "  switch [branch]    Switch to development environment (interactive menu if no branch)"
    echo "  stop <branch>      Stop tmux session for branch"
    echo "  cleanup <branch>   Clean up development environment (stop + remove worktree)"
    echo "  cleanup-all        Clean up all development environments for current repo"
    echo "  list               List all development environments for current repo"
    echo "  help               Show this help message"
    echo ""
    echo "Options:"
    echo "  --force            Force operations (for cleanup commands)"
    echo ""
    echo "Examples:"
    echo "  multi start feature/new-dashboard    # Create and auto-switch to environment"
    echo "  multi switch                         # Show interactive menu to pick environment"
    echo "  multi switch main                    # Switch directly to main branch environment"
    echo "  multi cleanup feature/old-feature    # Clean up when done"
    echo "  multi list                           # See all environments"
    echo ""
    echo "The tool will automatically:"
    echo "  • Create git worktrees in .dev-worktrees/ (branched from main)"
    echo "  • Set up tmux sessions with main, dev, and git windows"
    echo "  • Configure custom status bar showing repo → branch info"
    echo "  • Switch to the new session immediately"
    echo "  • Provide easy commands to launch Cursor or Claude Code"
    echo "  • Detect and suggest development commands for your project"
    echo "  • Work with any git repository"
    echo ""
    echo "Quick tmux tips:"
    echo "  • Inside tmux: Ctrl+b then s → shows session switcher"
    echo "  • Inside tmux: Ctrl+b then w → shows window/pane tree"
    echo "  • From terminal: multi switch → interactive environment picker"
}

# Main script logic
main() {
    check_tmux
    
    case "${1:-help}" in
        "help"|"--help"|"-h")
            show_usage
            ;;
        "start")
            init_git_vars
            start_env "$2"
            ;;
        "switch")
            init_git_vars
            switch_env "$2"
            ;;
        "stop")
            init_git_vars
            stop_env "$2"
            ;;
        "cleanup")
            init_git_vars
            cleanup_env "$2" "$3"
            ;;
        "cleanup-all")
            init_git_vars
            cleanup_all "$2"
            ;;
        "list")
            init_git_vars
            list_envs
            ;;
        *)
            log_error "Unknown command: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"